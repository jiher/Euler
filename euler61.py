"""
Problem 61

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, have three interesting properties.

   1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
   2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
   3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

def tri(n):
    return n*(n+1)/2
def car(n):
    return n*n
def pen(n):
    return n*(3*n-1)/2
def hex(n):
    return n*(2*n-1)
def hep(n):
    return n*(5*n-3)/2
def oct(n):
    return n*(3*n-2)



"""
chercher les nombres a 4 chiffres,
les ventiler par clase debut et fin
"""
hash={}
d='d'
f='f'
for i in range(120):
    rec=[0,1,2,tri(i),car(i),pen(i),hex(i),hep(i),oct(i)]
    for ind in range(3,9):
        n=rec[ind]
        if n <1000:
            continue
        if n>9999:
            continue
        
        deb=n/100
        fin=n%100
        if not hash.has_key(ind):
           hash[ind]={}
           hash[ind]['d']={}
           hash[ind]['f']={}
        if not hash[ind]['d'].has_key(deb):
            hash[ind]['d'][deb]=[]
        hash[ind]['d'][deb].append(n)
        if not hash[ind]['f'].has_key(fin):
            hash[ind]['f'][fin]=[]
        hash[ind]['f'][fin].append(n)

for k in hash.keys():
    print k,'d',len(hash[k][d].keys()),'f',len(hash[k][f].keys())
"""
eliminons les chaine qui vont pas
"""
for deb in range(3,9):
    clefs=hash[deb][d].keys()
    efface=True
    tobedel=[]
    for c in clefs:
        for fin in range(3,9):
            if fin==deb:
                continue
            if c in hash[fin][f].keys():
                efface=False
                print "classe:%s debut:%s  trouve dans fin:%s"%(deb,c,fin)
                break
        if efface:
            tobedel.append(c)
    for c in tobedel:
        del hash[deb][d][c]
for deb in range(3,9):
    clefs=hash[deb][f].keys()
    efface=True
    tobedel=[]
    for c in clefs:
        for fin in range(3,9):
            if fin==deb:
                continue
            if c in hash[fin][d].keys():
                efface=False
                print "classe:%s fin:%s  trouve dans debut:%s"%(deb,c,fin)
                break
        if efface:
            tobedel.append(c)
    for c in tobedel:
        del hash[deb][f][c]
    

        

""" Simplification: intersections entre d et f de la meme clase.
"""

for classe in range(3,9):

    for cle in hash[classe][d].keys():
        tests=hash[classe][d][cle]
        dele=[]
        for val in tests:
            fin=val%100
            if fin not in hash[classe][f].keys():
                #print val,fin ,tests
                dele=tests.index(val)

                tests[dele]=0
        hash[classe][d][cle]=[]
        for val in tests:
            if val:
                hash[classe][d][cle].append(val)
        

    for cle in hash[classe][f].keys():
        tests=hash[classe][f][cle]
        for val in tests:
            fin=val/100
            if fin not in hash[classe][d].keys():
                #print val,fin 
                dele=tests.index(val)
                tests[dele]=0
                #print val,fin ,tests,dele
        hash[classe][f][cle]=[]
        for val in tests:
            if val:
                hash[classe][f][cle].append(val)



for deb in range(3,9):
    clefs=hash[deb][d].keys()
    efface=True
    tobedel=[]
    for c in clefs:
        for fin in range(3,9):
            if fin==deb:
                continue
            if c in hash[fin][f].keys():
                efface=False
                print "classe:%s debut:%s  trouve dans fin:%s"%(deb,c,fin)
                break
        if efface:
            tobedel.append(c)
    for c in tobedel:
        del hash[deb][d][c]
for deb in range(3,9):
    clefs=hash[deb][f].keys()
    efface=True
    tobedel=[]
    for c in clefs:
        for fin in range(3,9):
            if fin==deb:
                continue
            if c in hash[fin][d].keys():
                efface=False
                print "classe:%s fin:%s  trouve dans debut:%s"%(deb,c,fin)
                break
        if efface:
            tobedel.append(c)
    for c in tobedel:
        del hash[deb][f][c]
    

            
""" nettoyons les entree de longueur nulle
"""
for k in hash.keys():
    tobedel=[]
    for kd in hash[k][d].keys() :
        
        if len(hash[k][d][kd])==0:
            tobedel.append(kd)
    for kd in tobedel:
        del hash[k][d][kd]
    tobedel=[]
    for kd in hash[k][f].keys() :
        
        if len(hash[k][f][kd])==0:
            tobedel.append(kd)
    for kd in tobedel:
        del hash[k][f][kd]
    print k,'d',len(hash[k][d].keys()),'f',len(hash[k][f].keys())


""" la classe "5d" comport 8 clefs, et 8 elementcommencons par elle
"""
##print "3d:",hash[3][d]
##print "3f:",hash[3][f]
##print "4d:",hash[4][d]
##print "4f:",hash[4][f]
##print "5d:",hash[5][d]
##print "5f:",hash[5][f]
##print "6d:",hash[6][d]
##print "6f:",hash[6][f]
##print "7d:",hash[7][d]
##print "7f:",hash[7][f]
##print "8d:",hash[8][d]
##print "8f:",hash[8][f]
